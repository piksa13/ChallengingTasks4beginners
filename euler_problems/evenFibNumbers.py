'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Result: 4613732
'''

import time

# def fib(n):
#     if n == 0:
#         return 0
#     elif n == 1:
#         return 1
#     else:
#         return fib(n-1) + fib(n-2)


def fib(n):
    fib_list = []
    for j in range(0, n+1):
        if j == 0:
            fib_list.append(0)
        elif j == 1:
            fib_list.append(1)
        else:
            fib_list.append(fib_list[j-1] + fib_list[j-2])
    return fib_list[-1]

i = 0
even_fib_list = []  # Used only for debugging
even_sum = 0
start_time = time.time()
while fib(i) <= 4000000:
    if fib(i) % 2 == 0:
        even_fib_list.append(fib(i))
        even_sum += fib(i)
    i += 1

elapsed = time.time() - start_time
print(f'{even_sum} and the time it took to get it is {elapsed} ')
